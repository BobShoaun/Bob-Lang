//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammar/BobLangParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BobLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Type_=1, SemiColon=2, Comma=3, Colon=4, QuestionMark=5, OpenParenthesis=6, 
		CloseParenthesis=7, OpenBracket=8, CloseBracket=9, OpenBrace=10, CloseBrace=11, 
		Ellipsis=12, Dot=13, Not=14, PlusPlus=15, MinusMinus=16, Plus=17, Minus=18, 
		Multiply=19, Divide=20, Modulo=21, Assign=22, Arrow=23, LessThan=24, MoreThan=25, 
		LessThanEquals=26, GreaterThanEquals=27, Equals_=28, NotEquals=29, And=30, 
		Or=31, Break=32, Do=33, Case=34, Else=35, New=36, Catch=37, Finally=38, 
		Return=39, Continue=40, For=41, Switch=42, While=43, This=44, With=45, 
		Default=46, If=47, Throw=48, Delete=49, In=50, Try=51, As=52, From=53, 
		Of=54, Yield=55, YieldStar=56, Modifier=57, Null=58, Boolean=59, Integer=60, 
		Character=61, Identifier=62, Whitespace=63, Comment=64;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_ifStatement = 3, 
		RULE_iterationStatement = 4, RULE_iteratorInitializer = 5, RULE_expression = 6, 
		RULE_literal = 7, RULE_arguments = 8, RULE_array = 9, RULE_element = 10, 
		RULE_function = 11, RULE_parameters = 12, RULE_parameter = 13, RULE_body = 14, 
		RULE_scope = 15, RULE_return = 16, RULE_break = 17, RULE_continue = 18, 
		RULE_end = 19;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "ifStatement", "iterationStatement", 
		"iteratorInitializer", "expression", "literal", "arguments", "array", 
		"element", "function", "parameters", "parameter", "body", "scope", "return", 
		"break", "continue", "end"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "';'", "','", "':'", "'?'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'...'", "'.'", "'!'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'='", "'=>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", 
		"'||'", "'break'", "'do'", "'case'", "'else'", "'new'", "'catch'", "'finally'", 
		"'return'", "'continue'", "'for'", "'switch'", "'while'", "'this'", "'with'", 
		"'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", 
		"'of'", "'yield'", "'yield*'", null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Type_", "SemiColon", "Comma", "Colon", "QuestionMark", "OpenParenthesis", 
		"CloseParenthesis", "OpenBracket", "CloseBracket", "OpenBrace", "CloseBrace", 
		"Ellipsis", "Dot", "Not", "PlusPlus", "MinusMinus", "Plus", "Minus", "Multiply", 
		"Divide", "Modulo", "Assign", "Arrow", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "And", "Or", "Break", "Do", 
		"Case", "Else", "New", "Catch", "Finally", "Return", "Continue", "For", 
		"Switch", "While", "This", "With", "Default", "If", "Throw", "Delete", 
		"In", "Try", "As", "From", "Of", "Yield", "YieldStar", "Modifier", "Null", 
		"Boolean", "Integer", "Character", "Identifier", "Whitespace", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BobLangParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BobLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BobLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BobLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079410243536405826L) != 0)) {
				{
				{
				State = 40;
				statement();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BreakContext @break() {
			return GetRuleContext<BreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ContinueContext @continue() {
			return GetRuleContext<ContinueContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 64;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type_:
			case Modifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 46;
				declaration();
				State = 47;
				end();
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 49;
				expression(0);
				State = 50;
				end();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 3);
				{
				State = 52;
				ifStatement();
				}
				break;
			case Do:
			case For:
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 53;
				iterationStatement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 5);
				{
				State = 54;
				scope();
				}
				break;
			case Return:
				EnterOuterAlt(_localctx, 6);
				{
				State = 55;
				@return();
				State = 56;
				end();
				}
				break;
			case Break:
				EnterOuterAlt(_localctx, 7);
				{
				State = 58;
				@break();
				State = 59;
				end();
				}
				break;
			case Continue:
				EnterOuterAlt(_localctx, 8);
				{
				State = 61;
				@continue();
				State = 62;
				end();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type_() { return GetToken(BobLangParser.Type_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BobLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modifier() { return GetToken(BobLangParser.Modifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(BobLangParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Modifier) {
				{
				State = 66;
				Match(Modifier);
				}
			}

			State = 69;
			Match(Type_);
			State = 70;
			Match(Identifier);
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 71;
				Match(Assign);
				State = 72;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(BobLangParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(BobLangParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(If);
			State = 76;
			Match(OpenParenthesis);
			State = 77;
			expression(0);
			State = 78;
			Match(CloseParenthesis);
			State = 79;
			statement();
			State = 82;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 80;
				Match(Else);
				State = 81;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatmentContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(BobLangParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatmentContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public IteratorInitializerContext pre;
		public ExpressionContext condition;
		public ExpressionContext post;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(BobLangParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(BobLangParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(BobLangParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratorInitializerContext iteratorInitializer() {
			return GetRuleContext<IteratorInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(BobLangParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(BobLangParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public DoWhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_iterationStatement);
		int _la;
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				_localctx = new WhileStatmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				Match(While);
				State = 85;
				Match(OpenParenthesis);
				State = 86;
				expression(0);
				State = 87;
				Match(CloseParenthesis);
				State = 88;
				statement();
				}
				break;
			case Do:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 90;
				Match(Do);
				State = 91;
				statement();
				State = 92;
				Match(While);
				State = 93;
				Match(OpenParenthesis);
				State = 94;
				expression(0);
				State = 95;
				Match(CloseParenthesis);
				State = 96;
				end();
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				Match(For);
				State = 99;
				Match(OpenParenthesis);
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079256848779428162L) != 0)) {
					{
					State = 100;
					((ForStatementContext)_localctx).pre = iteratorInitializer();
					}
				}

				State = 103;
				Match(SemiColon);
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8935141660703572288L) != 0)) {
					{
					State = 104;
					((ForStatementContext)_localctx).condition = expression(0);
					}
				}

				State = 107;
				Match(SemiColon);
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8935141660703572288L) != 0)) {
					{
					State = 108;
					((ForStatementContext)_localctx).post = expression(0);
					}
				}

				State = 111;
				Match(CloseParenthesis);
				State = 112;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IteratorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorInitializerContext iteratorInitializer() {
		IteratorInitializerContext _localctx = new IteratorInitializerContext(Context, State);
		EnterRule(_localctx, 10, RULE_iteratorInitializer);
		try {
			State = 117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type_:
			case Modifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				declaration();
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(BobLangParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(BobLangParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(BobLangParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(BobLangParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(BobLangParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(BobLangParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(BobLangParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(BobLangParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(BobLangParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(BobLangParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(BobLangParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(BobLangParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(BobLangParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(BobLangParser.GreaterThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(BobLangParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(BobLangParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(BobLangParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(BobLangParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(BobLangParser.Assign, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(BobLangParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(BobLangParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(BobLangParser.Not, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(BobLangParser.MinusMinus, 0); }
		public PostDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BobLangParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 120;
				function();
				}
				break;
			case 2:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 121;
				Match(PlusPlus);
				State = 122;
				expression(16);
				}
				break;
			case 3:
				{
				_localctx = new PreDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 123;
				Match(MinusMinus);
				State = 124;
				expression(15);
				}
				break;
			case 4:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 125;
				Match(Plus);
				State = 126;
				expression(14);
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 127;
				Match(Minus);
				State = 128;
				expression(13);
				}
				break;
			case 6:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 129;
				Match(Not);
				State = 130;
				expression(12);
				}
				break;
			case 7:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 131;
				literal();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 132;
				Match(Identifier);
				}
				break;
			case 9:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 133;
				Match(OpenParenthesis);
				State = 134;
				expression(0);
				State = 135;
				Match(CloseParenthesis);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 140;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 141;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 143;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 144;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 145;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 146;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 147;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 149;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals_ || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 150;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 152;
						Match(And);
						State = 153;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 154;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 155;
						Match(Or);
						State = 156;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 158;
						Match(QuestionMark);
						State = 159;
						expression(0);
						State = 160;
						Match(Colon);
						State = 161;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 163;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 164;
						Match(Assign);
						State = 165;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 167;
						Match(OpenParenthesis);
						State = 168;
						arguments();
						State = 169;
						Match(CloseParenthesis);
						}
						break;
					case 10:
						{
						_localctx = new PostIncrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 171;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 172;
						((PostIncrementExpressionContext)_localctx).op = Match(PlusPlus);
						}
						break;
					case 11:
						{
						_localctx = new PostDecrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 173;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 174;
						((PostDecrementExpressionContext)_localctx).op = Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(BobLangParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(BobLangParser.Character, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(BobLangParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(BobLangParser.Null, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			State = 185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 180;
				Match(Integer);
				}
				break;
			case Character:
				EnterOuterAlt(_localctx, 2);
				{
				State = 181;
				Match(Character);
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 3);
				{
				State = 182;
				Match(Boolean);
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 183;
				array();
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 5);
				{
				State = 184;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BobLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BobLangParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_arguments);
		int _la;
		try {
			State = 196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CloseParenthesis:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 188;
				expression(0);
				State = 193;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 189;
					Match(Comma);
					State = 190;
					expression(0);
					}
					}
					State = 195;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(BobLangParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(BobLangParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BobLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BobLangParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(OpenBracket);
			State = 199;
			element();
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 200;
				Match(Comma);
				State = 201;
				element();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(BobLangParser.Ellipsis, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 20, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 209;
				Match(Ellipsis);
				}
			}

			State = 212;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(BobLangParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type_() { return GetToken(BobLangParser.Type_, 0); }
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214;
			parameters();
			State = 215;
			Match(Arrow);
			State = 217;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Type_) {
				{
				State = 216;
				Match(Type_);
				}
			}

			State = 219;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BobLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BobLangParser.Comma, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221;
			Match(OpenParenthesis);
			State = 222;
			parameter();
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 223;
				Match(Comma);
				State = 224;
				parameter();
				}
				}
				State = 229;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 230;
			Match(CloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type_() { return GetToken(BobLangParser.Type_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BobLangParser.Identifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			Match(Type_);
			State = 233;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_body);
		try {
			State = 237;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 235;
				scope();
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 236;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(BobLangParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(BobLangParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 30, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			Match(OpenBrace);
			State = 243;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079410243536405826L) != 0)) {
				{
				{
				State = 240;
				statement();
				}
				}
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 246;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Return() { return GetToken(BobLangParser.Return, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 32, RULE_return);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(Return);
			State = 250;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				State = 249;
				expression(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Break() { return GetToken(BobLangParser.Break, 0); }
		public BreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_break; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBreak(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BreakContext @break() {
		BreakContext _localctx = new BreakContext(Context, State);
		EnterRule(_localctx, 34, RULE_break);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 252;
			Match(Break);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContinueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Continue() { return GetToken(BobLangParser.Continue, 0); }
		public ContinueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_continue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContinue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContinueContext @continue() {
		ContinueContext _localctx = new ContinueContext(Context, State);
		EnterRule(_localctx, 36, RULE_continue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 254;
			Match(Continue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(BobLangParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BobLangParser.Eof, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 38, RULE_end);
		try {
			State = 259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 256;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 257;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,262,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,5,0,42,8,0,10,0,
		12,0,45,9,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,3,1,65,8,1,1,2,3,2,68,8,2,1,2,1,2,1,2,1,2,3,2,74,8,2,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,3,3,83,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,102,8,4,1,4,1,4,3,4,106,8,4,1,4,1,
		4,3,4,110,8,4,1,4,1,4,3,4,114,8,4,1,5,1,5,3,5,118,8,5,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,138,8,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,5,6,176,8,6,10,6,12,6,179,9,6,1,7,1,7,1,7,1,7,1,7,3,7,186,8,7,1,8,1,
		8,1,8,1,8,5,8,192,8,8,10,8,12,8,195,9,8,3,8,197,8,8,1,9,1,9,1,9,1,9,5,
		9,203,8,9,10,9,12,9,206,9,9,1,9,1,9,1,10,3,10,211,8,10,1,10,1,10,1,11,
		1,11,1,11,3,11,218,8,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,226,8,12,10,
		12,12,12,229,9,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,3,14,238,8,14,1,15,
		1,15,5,15,242,8,15,10,15,12,15,245,9,15,1,15,1,15,1,16,1,16,3,16,251,8,
		16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,3,19,260,8,19,1,19,0,1,12,20,0,2,
		4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,0,4,1,0,19,21,1,0,17,
		18,1,0,24,27,1,0,28,29,292,0,43,1,0,0,0,2,64,1,0,0,0,4,67,1,0,0,0,6,75,
		1,0,0,0,8,113,1,0,0,0,10,117,1,0,0,0,12,137,1,0,0,0,14,185,1,0,0,0,16,
		196,1,0,0,0,18,198,1,0,0,0,20,210,1,0,0,0,22,214,1,0,0,0,24,221,1,0,0,
		0,26,232,1,0,0,0,28,237,1,0,0,0,30,239,1,0,0,0,32,248,1,0,0,0,34,252,1,
		0,0,0,36,254,1,0,0,0,38,259,1,0,0,0,40,42,3,2,1,0,41,40,1,0,0,0,42,45,
		1,0,0,0,43,41,1,0,0,0,43,44,1,0,0,0,44,1,1,0,0,0,45,43,1,0,0,0,46,47,3,
		4,2,0,47,48,3,38,19,0,48,65,1,0,0,0,49,50,3,12,6,0,50,51,3,38,19,0,51,
		65,1,0,0,0,52,65,3,6,3,0,53,65,3,8,4,0,54,65,3,30,15,0,55,56,3,32,16,0,
		56,57,3,38,19,0,57,65,1,0,0,0,58,59,3,34,17,0,59,60,3,38,19,0,60,65,1,
		0,0,0,61,62,3,36,18,0,62,63,3,38,19,0,63,65,1,0,0,0,64,46,1,0,0,0,64,49,
		1,0,0,0,64,52,1,0,0,0,64,53,1,0,0,0,64,54,1,0,0,0,64,55,1,0,0,0,64,58,
		1,0,0,0,64,61,1,0,0,0,65,3,1,0,0,0,66,68,5,57,0,0,67,66,1,0,0,0,67,68,
		1,0,0,0,68,69,1,0,0,0,69,70,5,1,0,0,70,73,5,62,0,0,71,72,5,22,0,0,72,74,
		3,12,6,0,73,71,1,0,0,0,73,74,1,0,0,0,74,5,1,0,0,0,75,76,5,47,0,0,76,77,
		5,6,0,0,77,78,3,12,6,0,78,79,5,7,0,0,79,82,3,2,1,0,80,81,5,35,0,0,81,83,
		3,2,1,0,82,80,1,0,0,0,82,83,1,0,0,0,83,7,1,0,0,0,84,85,5,43,0,0,85,86,
		5,6,0,0,86,87,3,12,6,0,87,88,5,7,0,0,88,89,3,2,1,0,89,114,1,0,0,0,90,91,
		5,33,0,0,91,92,3,2,1,0,92,93,5,43,0,0,93,94,5,6,0,0,94,95,3,12,6,0,95,
		96,5,7,0,0,96,97,3,38,19,0,97,114,1,0,0,0,98,99,5,41,0,0,99,101,5,6,0,
		0,100,102,3,10,5,0,101,100,1,0,0,0,101,102,1,0,0,0,102,103,1,0,0,0,103,
		105,5,2,0,0,104,106,3,12,6,0,105,104,1,0,0,0,105,106,1,0,0,0,106,107,1,
		0,0,0,107,109,5,2,0,0,108,110,3,12,6,0,109,108,1,0,0,0,109,110,1,0,0,0,
		110,111,1,0,0,0,111,112,5,7,0,0,112,114,3,2,1,0,113,84,1,0,0,0,113,90,
		1,0,0,0,113,98,1,0,0,0,114,9,1,0,0,0,115,118,3,4,2,0,116,118,3,12,6,0,
		117,115,1,0,0,0,117,116,1,0,0,0,118,11,1,0,0,0,119,120,6,6,-1,0,120,138,
		3,22,11,0,121,122,5,15,0,0,122,138,3,12,6,16,123,124,5,16,0,0,124,138,
		3,12,6,15,125,126,5,17,0,0,126,138,3,12,6,14,127,128,5,18,0,0,128,138,
		3,12,6,13,129,130,5,14,0,0,130,138,3,12,6,12,131,138,3,14,7,0,132,138,
		5,62,0,0,133,134,5,6,0,0,134,135,3,12,6,0,135,136,5,7,0,0,136,138,1,0,
		0,0,137,119,1,0,0,0,137,121,1,0,0,0,137,123,1,0,0,0,137,125,1,0,0,0,137,
		127,1,0,0,0,137,129,1,0,0,0,137,131,1,0,0,0,137,132,1,0,0,0,137,133,1,
		0,0,0,138,177,1,0,0,0,139,140,10,11,0,0,140,141,7,0,0,0,141,176,3,12,6,
		12,142,143,10,10,0,0,143,144,7,1,0,0,144,176,3,12,6,11,145,146,10,9,0,
		0,146,147,7,2,0,0,147,176,3,12,6,10,148,149,10,8,0,0,149,150,7,3,0,0,150,
		176,3,12,6,9,151,152,10,7,0,0,152,153,5,30,0,0,153,176,3,12,6,8,154,155,
		10,6,0,0,155,156,5,31,0,0,156,176,3,12,6,7,157,158,10,5,0,0,158,159,5,
		5,0,0,159,160,3,12,6,0,160,161,5,4,0,0,161,162,3,12,6,6,162,176,1,0,0,
		0,163,164,10,4,0,0,164,165,5,22,0,0,165,176,3,12,6,5,166,167,10,19,0,0,
		167,168,5,6,0,0,168,169,3,16,8,0,169,170,5,7,0,0,170,176,1,0,0,0,171,172,
		10,18,0,0,172,176,5,15,0,0,173,174,10,17,0,0,174,176,5,16,0,0,175,139,
		1,0,0,0,175,142,1,0,0,0,175,145,1,0,0,0,175,148,1,0,0,0,175,151,1,0,0,
		0,175,154,1,0,0,0,175,157,1,0,0,0,175,163,1,0,0,0,175,166,1,0,0,0,175,
		171,1,0,0,0,175,173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,
		0,0,0,178,13,1,0,0,0,179,177,1,0,0,0,180,186,5,60,0,0,181,186,5,61,0,0,
		182,186,5,59,0,0,183,186,3,18,9,0,184,186,5,58,0,0,185,180,1,0,0,0,185,
		181,1,0,0,0,185,182,1,0,0,0,185,183,1,0,0,0,185,184,1,0,0,0,186,15,1,0,
		0,0,187,197,1,0,0,0,188,193,3,12,6,0,189,190,5,3,0,0,190,192,3,12,6,0,
		191,189,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,197,
		1,0,0,0,195,193,1,0,0,0,196,187,1,0,0,0,196,188,1,0,0,0,197,17,1,0,0,0,
		198,199,5,8,0,0,199,204,3,20,10,0,200,201,5,3,0,0,201,203,3,20,10,0,202,
		200,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,1,
		0,0,0,206,204,1,0,0,0,207,208,5,9,0,0,208,19,1,0,0,0,209,211,5,12,0,0,
		210,209,1,0,0,0,210,211,1,0,0,0,211,212,1,0,0,0,212,213,3,12,6,0,213,21,
		1,0,0,0,214,215,3,24,12,0,215,217,5,23,0,0,216,218,5,1,0,0,217,216,1,0,
		0,0,217,218,1,0,0,0,218,219,1,0,0,0,219,220,3,28,14,0,220,23,1,0,0,0,221,
		222,5,6,0,0,222,227,3,26,13,0,223,224,5,3,0,0,224,226,3,26,13,0,225,223,
		1,0,0,0,226,229,1,0,0,0,227,225,1,0,0,0,227,228,1,0,0,0,228,230,1,0,0,
		0,229,227,1,0,0,0,230,231,5,7,0,0,231,25,1,0,0,0,232,233,5,1,0,0,233,234,
		5,62,0,0,234,27,1,0,0,0,235,238,3,30,15,0,236,238,3,12,6,0,237,235,1,0,
		0,0,237,236,1,0,0,0,238,29,1,0,0,0,239,243,5,10,0,0,240,242,3,2,1,0,241,
		240,1,0,0,0,242,245,1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,246,1,
		0,0,0,245,243,1,0,0,0,246,247,5,11,0,0,247,31,1,0,0,0,248,250,5,39,0,0,
		249,251,3,12,6,0,250,249,1,0,0,0,250,251,1,0,0,0,251,33,1,0,0,0,252,253,
		5,32,0,0,253,35,1,0,0,0,254,255,5,40,0,0,255,37,1,0,0,0,256,260,5,2,0,
		0,257,260,5,0,0,1,258,260,1,0,0,0,259,256,1,0,0,0,259,257,1,0,0,0,259,
		258,1,0,0,0,260,39,1,0,0,0,24,43,64,67,73,82,101,105,109,113,117,137,175,
		177,185,193,196,204,210,217,227,237,243,250,259
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
