//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from grammar/BobLangParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BobLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Type_=1, SemiColon=2, Comma=3, Colon=4, QuestionMark=5, OpenParenthesis=6, 
		CloseParenthesis=7, OpenBracket=8, CloseBracket=9, OpenBrace=10, CloseBrace=11, 
		Ellipsis=12, Dot=13, Not=14, PlusPlus=15, MinusMinus=16, Plus=17, Minus=18, 
		Multiply=19, Divide=20, Modulo=21, Assign=22, Arrow=23, LessThan=24, MoreThan=25, 
		LessThanEquals=26, GreaterThanEquals=27, Equals_=28, NotEquals=29, And=30, 
		Or=31, Break=32, Do=33, Case=34, Else=35, New=36, Catch=37, Finally=38, 
		Return=39, Continue=40, For=41, Switch=42, While=43, This=44, With=45, 
		Default=46, If=47, Throw=48, Delete=49, In=50, Try=51, As=52, From=53, 
		Of=54, Yield=55, YieldStar=56, Modifier=57, Null=58, Boolean=59, Integer=60, 
		Character=61, Identifier=62, Whitespace=63, Comment=64;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_declaration = 2, RULE_ifStatement = 3, 
		RULE_iterationStatement = 4, RULE_iteratorInitializer = 5, RULE_expression = 6, 
		RULE_literal = 7, RULE_arguments = 8, RULE_array = 9, RULE_element = 10, 
		RULE_function = 11, RULE_parameters = 12, RULE_parameter = 13, RULE_body = 14, 
		RULE_scope = 15, RULE_end = 16;
	public static readonly string[] ruleNames = {
		"program", "statement", "declaration", "ifStatement", "iterationStatement", 
		"iteratorInitializer", "expression", "literal", "arguments", "array", 
		"element", "function", "parameters", "parameter", "body", "scope", "end"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "';'", "','", "':'", "'?'", "'('", "')'", "'['", "']'", "'{'", 
		"'}'", "'...'", "'.'", "'!'", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'='", "'=>'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", 
		"'||'", "'break'", "'do'", "'case'", "'else'", "'new'", "'catch'", "'finally'", 
		"'return'", "'continue'", "'for'", "'switch'", "'while'", "'this'", "'with'", 
		"'default'", "'if'", "'throw'", "'delete'", "'in'", "'try'", "'as'", "'from'", 
		"'of'", "'yield'", "'yield*'", null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Type_", "SemiColon", "Comma", "Colon", "QuestionMark", "OpenParenthesis", 
		"CloseParenthesis", "OpenBracket", "CloseBracket", "OpenBrace", "CloseBrace", 
		"Ellipsis", "Dot", "Not", "PlusPlus", "MinusMinus", "Plus", "Minus", "Multiply", 
		"Divide", "Modulo", "Assign", "Arrow", "LessThan", "MoreThan", "LessThanEquals", 
		"GreaterThanEquals", "Equals_", "NotEquals", "And", "Or", "Break", "Do", 
		"Case", "Else", "New", "Catch", "Finally", "Return", "Continue", "For", 
		"Switch", "While", "This", "With", "Default", "If", "Throw", "Delete", 
		"In", "Try", "As", "From", "Of", "Yield", "YieldStar", "Modifier", "Null", 
		"Boolean", "Integer", "Character", "Identifier", "Whitespace", "Comment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BobLangParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BobLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public BobLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public BobLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079408589973996866L) != 0)) {
				{
				{
				State = 34;
				statement();
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 49;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type_:
			case Modifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				declaration();
				State = 41;
				end();
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 43;
				expression(0);
				State = 44;
				end();
				}
				break;
			case If:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46;
				ifStatement();
				}
				break;
			case Do:
			case For:
			case While:
				EnterOuterAlt(_localctx, 4);
				{
				State = 47;
				iterationStatement();
				}
				break;
			case OpenBrace:
				EnterOuterAlt(_localctx, 5);
				{
				State = 48;
				scope();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type_() { return GetToken(BobLangParser.Type_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BobLangParser.Identifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modifier() { return GetToken(BobLangParser.Modifier, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(BobLangParser.Assign, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Modifier) {
				{
				State = 51;
				Match(Modifier);
				}
			}

			State = 54;
			Match(Type_);
			State = 55;
			Match(Identifier);
			State = 58;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Assign) {
				{
				State = 56;
				Match(Assign);
				State = 57;
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode If() { return GetToken(BobLangParser.If, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Else() { return GetToken(BobLangParser.Else, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(If);
			State = 61;
			Match(OpenParenthesis);
			State = 62;
			expression(0);
			State = 63;
			Match(CloseParenthesis);
			State = 64;
			statement();
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				{
				State = 65;
				Match(Else);
				State = 66;
				statement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
	 
		public IterationStatementContext() { }
		public virtual void CopyFrom(IterationStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class WhileStatmentContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(BobLangParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileStatmentContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ForStatementContext : IterationStatementContext {
		public IteratorInitializerContext pre;
		public ExpressionContext condition;
		public ExpressionContext post;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode For() { return GetToken(BobLangParser.For, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SemiColon() { return GetTokens(BobLangParser.SemiColon); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon(int i) {
			return GetToken(BobLangParser.SemiColon, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IteratorInitializerContext iteratorInitializer() {
			return GetRuleContext<IteratorInitializerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ForStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileStatementContext : IterationStatementContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Do() { return GetToken(BobLangParser.Do, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode While() { return GetToken(BobLangParser.While, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EndContext end() {
			return GetRuleContext<EndContext>(0);
		}
		public DoWhileStatementContext(IterationStatementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext iterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_iterationStatement);
		int _la;
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case While:
				_localctx = new WhileStatmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 69;
				Match(While);
				State = 70;
				Match(OpenParenthesis);
				State = 71;
				expression(0);
				State = 72;
				Match(CloseParenthesis);
				State = 73;
				statement();
				}
				break;
			case Do:
				_localctx = new DoWhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 75;
				Match(Do);
				State = 76;
				statement();
				State = 77;
				Match(While);
				State = 78;
				Match(OpenParenthesis);
				State = 79;
				expression(0);
				State = 80;
				Match(CloseParenthesis);
				State = 81;
				end();
				}
				break;
			case For:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 83;
				Match(For);
				State = 84;
				Match(OpenParenthesis);
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079256848779428162L) != 0)) {
					{
					State = 85;
					((ForStatementContext)_localctx).pre = iteratorInitializer();
					}
				}

				State = 88;
				Match(SemiColon);
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8935141660703572288L) != 0)) {
					{
					State = 89;
					((ForStatementContext)_localctx).condition = expression(0);
					}
				}

				State = 92;
				Match(SemiColon);
				State = 94;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8935141660703572288L) != 0)) {
					{
					State = 93;
					((ForStatementContext)_localctx).post = expression(0);
					}
				}

				State = 96;
				Match(CloseParenthesis);
				State = 97;
				statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IteratorInitializerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IteratorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iteratorInitializer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIteratorInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IteratorInitializerContext iteratorInitializer() {
		IteratorInitializerContext _localctx = new IteratorInitializerContext(Context, State);
		EnterRule(_localctx, 10, RULE_iteratorInitializer);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Type_:
			case Modifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 100;
				declaration();
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class TernaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(BobLangParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(BobLangParser.Colon, 0); }
		public TernaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTernaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(BobLangParser.PlusPlus, 0); }
		public PostIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(BobLangParser.MinusMinus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PlusPlus() { return GetToken(BobLangParser.PlusPlus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Multiply() { return GetToken(BobLangParser.Multiply, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Divide() { return GetToken(BobLangParser.Divide, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Modulo() { return GetToken(BobLangParser.Modulo, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(BobLangParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(BobLangParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThan() { return GetToken(BobLangParser.LessThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MoreThan() { return GetToken(BobLangParser.MoreThan, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LessThanEquals() { return GetToken(BobLangParser.LessThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GreaterThanEquals() { return GetToken(BobLangParser.GreaterThanEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Equals_() { return GetToken(BobLangParser.Equals_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NotEquals() { return GetToken(BobLangParser.NotEquals, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode And() { return GetToken(BobLangParser.And, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Or() { return GetToken(BobLangParser.Or, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Assign() { return GetToken(BobLangParser.Assign, 0); }
		public BinaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Plus() { return GetToken(BobLangParser.Plus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Minus() { return GetToken(BobLangParser.Minus, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Not() { return GetToken(BobLangParser.Not, 0); }
		public UnaryExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementExpressionContext : ExpressionContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MinusMinus() { return GetToken(BobLangParser.MinusMinus, 0); }
		public PostDecrementExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrementExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		public CallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BobLangParser.Identifier, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 105;
				function();
				}
				break;
			case 2:
				{
				_localctx = new PreIncrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 106;
				Match(PlusPlus);
				State = 107;
				expression(16);
				}
				break;
			case 3:
				{
				_localctx = new PreDecrementExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 108;
				Match(MinusMinus);
				State = 109;
				expression(15);
				}
				break;
			case 4:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 110;
				Match(Plus);
				State = 111;
				expression(14);
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 112;
				Match(Minus);
				State = 113;
				expression(13);
				}
				break;
			case 6:
				{
				_localctx = new UnaryExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 114;
				Match(Not);
				State = 115;
				expression(12);
				}
				break;
			case 7:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 116;
				literal();
				}
				break;
			case 8:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 117;
				Match(Identifier);
				}
				break;
			case 9:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 118;
				Match(OpenParenthesis);
				State = 119;
				expression(0);
				State = 120;
				Match(CloseParenthesis);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 162;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 160;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
					case 1:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 124;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 125;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3670016L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 126;
						expression(12);
						}
						break;
					case 2:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 127;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 128;
						_la = TokenStream.LA(1);
						if ( !(_la==Plus || _la==Minus) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 129;
						expression(11);
						}
						break;
					case 3:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 130;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 131;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 251658240L) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 132;
						expression(10);
						}
						break;
					case 4:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 133;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 134;
						_la = TokenStream.LA(1);
						if ( !(_la==Equals_ || _la==NotEquals) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 135;
						expression(9);
						}
						break;
					case 5:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 136;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 137;
						Match(And);
						State = 138;
						expression(8);
						}
						break;
					case 6:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 139;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 140;
						Match(Or);
						State = 141;
						expression(7);
						}
						break;
					case 7:
						{
						_localctx = new TernaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 142;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 143;
						Match(QuestionMark);
						State = 144;
						expression(0);
						State = 145;
						Match(Colon);
						State = 146;
						expression(6);
						}
						break;
					case 8:
						{
						_localctx = new BinaryExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 149;
						Match(Assign);
						State = 150;
						expression(5);
						}
						break;
					case 9:
						{
						_localctx = new CallExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 152;
						Match(OpenParenthesis);
						State = 153;
						arguments();
						State = 154;
						Match(CloseParenthesis);
						}
						break;
					case 10:
						{
						_localctx = new PostIncrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 156;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 157;
						((PostIncrementExpressionContext)_localctx).op = Match(PlusPlus);
						}
						break;
					case 11:
						{
						_localctx = new PostDecrementExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 158;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 159;
						((PostDecrementExpressionContext)_localctx).op = Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 164;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Integer() { return GetToken(BobLangParser.Integer, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Character() { return GetToken(BobLangParser.Character, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Boolean() { return GetToken(BobLangParser.Boolean, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Null() { return GetToken(BobLangParser.Null, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 14, RULE_literal);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 165;
				Match(Integer);
				}
				break;
			case Character:
				EnterOuterAlt(_localctx, 2);
				{
				State = 166;
				Match(Character);
				}
				break;
			case Boolean:
				EnterOuterAlt(_localctx, 3);
				{
				State = 167;
				Match(Boolean);
				}
				break;
			case OpenBracket:
				EnterOuterAlt(_localctx, 4);
				{
				State = 168;
				array();
				}
				break;
			case Null:
				EnterOuterAlt(_localctx, 5);
				{
				State = 169;
				Match(Null);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BobLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BobLangParser.Comma, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 16, RULE_arguments);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CloseParenthesis:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 173;
				expression(0);
				State = 178;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==Comma) {
					{
					{
					State = 174;
					Match(Comma);
					State = 175;
					expression(0);
					}
					}
					State = 180;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBracket() { return GetToken(BobLangParser.OpenBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext[] element() {
			return GetRuleContexts<ElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElementContext element(int i) {
			return GetRuleContext<ElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBracket() { return GetToken(BobLangParser.CloseBracket, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BobLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BobLangParser.Comma, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 18, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			Match(OpenBracket);
			State = 184;
			element();
			State = 189;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 185;
				Match(Comma);
				State = 186;
				element();
				}
				}
				State = 191;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 192;
			Match(CloseBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Ellipsis() { return GetToken(BobLangParser.Ellipsis, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementContext element() {
		ElementContext _localctx = new ElementContext(Context, State);
		EnterRule(_localctx, 20, RULE_element);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 194;
				Match(Ellipsis);
				}
			}

			State = 197;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Arrow() { return GetToken(BobLangParser.Arrow, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type_() { return GetToken(BobLangParser.Type_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 22, RULE_function);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199;
			parameters();
			State = 200;
			Match(Arrow);
			State = 201;
			Match(Type_);
			State = 202;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenParenthesis() { return GetToken(BobLangParser.OpenParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext[] parameter() {
			return GetRuleContexts<ParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParameterContext parameter(int i) {
			return GetRuleContext<ParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseParenthesis() { return GetToken(BobLangParser.CloseParenthesis, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Comma() { return GetTokens(BobLangParser.Comma); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Comma(int i) {
			return GetToken(BobLangParser.Comma, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(OpenParenthesis);
			State = 205;
			parameter();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==Comma) {
				{
				{
				State = 206;
				Match(Comma);
				State = 207;
				parameter();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 213;
			Match(CloseParenthesis);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Type_() { return GetToken(BobLangParser.Type_, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Identifier() { return GetToken(BobLangParser.Identifier, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParameterContext parameter() {
		ParameterContext _localctx = new ParameterContext(Context, State);
		EnterRule(_localctx, 26, RULE_parameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215;
			Match(Type_);
			State = 216;
			Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScopeContext scope() {
			return GetRuleContext<ScopeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 28, RULE_body);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OpenBrace:
				EnterOuterAlt(_localctx, 1);
				{
				State = 218;
				scope();
				}
				break;
			case OpenParenthesis:
			case OpenBracket:
			case Not:
			case PlusPlus:
			case MinusMinus:
			case Plus:
			case Minus:
			case Null:
			case Boolean:
			case Integer:
			case Character:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 219;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OpenBrace() { return GetToken(BobLangParser.OpenBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CloseBrace() { return GetToken(BobLangParser.CloseBrace, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scope; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScope(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopeContext scope() {
		ScopeContext _localctx = new ScopeContext(Context, State);
		EnterRule(_localctx, 30, RULE_scope);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(OpenBrace);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9079408589973996866L) != 0)) {
				{
				{
				State = 223;
				statement();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(CloseBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SemiColon() { return GetToken(BobLangParser.SemiColon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(BobLangParser.Eof, 0); }
		public EndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_end; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IBobLangParserVisitor<TResult> typedVisitor = visitor as IBobLangParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EndContext end() {
		EndContext _localctx = new EndContext(Context, State);
		EnterRule(_localctx, 32, RULE_end);
		try {
			State = 234;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				Match(SemiColon);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				Match(Eof);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 19);
		case 9: return Precpred(Context, 18);
		case 10: return Precpred(Context, 17);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,64,237,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,1,0,5,0,36,8,0,10,0,12,0,39,9,0,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,3,1,50,8,1,1,2,3,2,53,8,2,1,2,1,2,1,2,1,2,3,2,59,8,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,68,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,87,8,4,1,4,1,4,3,4,91,8,4,1,4,
		1,4,3,4,95,8,4,1,4,1,4,3,4,99,8,4,1,5,1,5,3,5,103,8,5,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,3,6,123,8,6,1,
		6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
		6,5,6,161,8,6,10,6,12,6,164,9,6,1,7,1,7,1,7,1,7,1,7,3,7,171,8,7,1,8,1,
		8,1,8,1,8,5,8,177,8,8,10,8,12,8,180,9,8,3,8,182,8,8,1,9,1,9,1,9,1,9,5,
		9,188,8,9,10,9,12,9,191,9,9,1,9,1,9,1,10,3,10,196,8,10,1,10,1,10,1,11,
		1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,209,8,12,10,12,12,12,212,
		9,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,3,14,221,8,14,1,15,1,15,5,15,225,
		8,15,10,15,12,15,228,9,15,1,15,1,15,1,16,1,16,1,16,3,16,235,8,16,1,16,
		0,1,12,17,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,0,4,1,0,19,21,
		1,0,17,18,1,0,24,27,1,0,28,29,265,0,37,1,0,0,0,2,49,1,0,0,0,4,52,1,0,0,
		0,6,60,1,0,0,0,8,98,1,0,0,0,10,102,1,0,0,0,12,122,1,0,0,0,14,170,1,0,0,
		0,16,181,1,0,0,0,18,183,1,0,0,0,20,195,1,0,0,0,22,199,1,0,0,0,24,204,1,
		0,0,0,26,215,1,0,0,0,28,220,1,0,0,0,30,222,1,0,0,0,32,234,1,0,0,0,34,36,
		3,2,1,0,35,34,1,0,0,0,36,39,1,0,0,0,37,35,1,0,0,0,37,38,1,0,0,0,38,1,1,
		0,0,0,39,37,1,0,0,0,40,41,3,4,2,0,41,42,3,32,16,0,42,50,1,0,0,0,43,44,
		3,12,6,0,44,45,3,32,16,0,45,50,1,0,0,0,46,50,3,6,3,0,47,50,3,8,4,0,48,
		50,3,30,15,0,49,40,1,0,0,0,49,43,1,0,0,0,49,46,1,0,0,0,49,47,1,0,0,0,49,
		48,1,0,0,0,50,3,1,0,0,0,51,53,5,57,0,0,52,51,1,0,0,0,52,53,1,0,0,0,53,
		54,1,0,0,0,54,55,5,1,0,0,55,58,5,62,0,0,56,57,5,22,0,0,57,59,3,12,6,0,
		58,56,1,0,0,0,58,59,1,0,0,0,59,5,1,0,0,0,60,61,5,47,0,0,61,62,5,6,0,0,
		62,63,3,12,6,0,63,64,5,7,0,0,64,67,3,2,1,0,65,66,5,35,0,0,66,68,3,2,1,
		0,67,65,1,0,0,0,67,68,1,0,0,0,68,7,1,0,0,0,69,70,5,43,0,0,70,71,5,6,0,
		0,71,72,3,12,6,0,72,73,5,7,0,0,73,74,3,2,1,0,74,99,1,0,0,0,75,76,5,33,
		0,0,76,77,3,2,1,0,77,78,5,43,0,0,78,79,5,6,0,0,79,80,3,12,6,0,80,81,5,
		7,0,0,81,82,3,32,16,0,82,99,1,0,0,0,83,84,5,41,0,0,84,86,5,6,0,0,85,87,
		3,10,5,0,86,85,1,0,0,0,86,87,1,0,0,0,87,88,1,0,0,0,88,90,5,2,0,0,89,91,
		3,12,6,0,90,89,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,94,5,2,0,0,93,95,
		3,12,6,0,94,93,1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,5,7,0,0,97,99,
		3,2,1,0,98,69,1,0,0,0,98,75,1,0,0,0,98,83,1,0,0,0,99,9,1,0,0,0,100,103,
		3,4,2,0,101,103,3,12,6,0,102,100,1,0,0,0,102,101,1,0,0,0,103,11,1,0,0,
		0,104,105,6,6,-1,0,105,123,3,22,11,0,106,107,5,15,0,0,107,123,3,12,6,16,
		108,109,5,16,0,0,109,123,3,12,6,15,110,111,5,17,0,0,111,123,3,12,6,14,
		112,113,5,18,0,0,113,123,3,12,6,13,114,115,5,14,0,0,115,123,3,12,6,12,
		116,123,3,14,7,0,117,123,5,62,0,0,118,119,5,6,0,0,119,120,3,12,6,0,120,
		121,5,7,0,0,121,123,1,0,0,0,122,104,1,0,0,0,122,106,1,0,0,0,122,108,1,
		0,0,0,122,110,1,0,0,0,122,112,1,0,0,0,122,114,1,0,0,0,122,116,1,0,0,0,
		122,117,1,0,0,0,122,118,1,0,0,0,123,162,1,0,0,0,124,125,10,11,0,0,125,
		126,7,0,0,0,126,161,3,12,6,12,127,128,10,10,0,0,128,129,7,1,0,0,129,161,
		3,12,6,11,130,131,10,9,0,0,131,132,7,2,0,0,132,161,3,12,6,10,133,134,10,
		8,0,0,134,135,7,3,0,0,135,161,3,12,6,9,136,137,10,7,0,0,137,138,5,30,0,
		0,138,161,3,12,6,8,139,140,10,6,0,0,140,141,5,31,0,0,141,161,3,12,6,7,
		142,143,10,5,0,0,143,144,5,5,0,0,144,145,3,12,6,0,145,146,5,4,0,0,146,
		147,3,12,6,6,147,161,1,0,0,0,148,149,10,4,0,0,149,150,5,22,0,0,150,161,
		3,12,6,5,151,152,10,19,0,0,152,153,5,6,0,0,153,154,3,16,8,0,154,155,5,
		7,0,0,155,161,1,0,0,0,156,157,10,18,0,0,157,161,5,15,0,0,158,159,10,17,
		0,0,159,161,5,16,0,0,160,124,1,0,0,0,160,127,1,0,0,0,160,130,1,0,0,0,160,
		133,1,0,0,0,160,136,1,0,0,0,160,139,1,0,0,0,160,142,1,0,0,0,160,148,1,
		0,0,0,160,151,1,0,0,0,160,156,1,0,0,0,160,158,1,0,0,0,161,164,1,0,0,0,
		162,160,1,0,0,0,162,163,1,0,0,0,163,13,1,0,0,0,164,162,1,0,0,0,165,171,
		5,60,0,0,166,171,5,61,0,0,167,171,5,59,0,0,168,171,3,18,9,0,169,171,5,
		58,0,0,170,165,1,0,0,0,170,166,1,0,0,0,170,167,1,0,0,0,170,168,1,0,0,0,
		170,169,1,0,0,0,171,15,1,0,0,0,172,182,1,0,0,0,173,178,3,12,6,0,174,175,
		5,3,0,0,175,177,3,12,6,0,176,174,1,0,0,0,177,180,1,0,0,0,178,176,1,0,0,
		0,178,179,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,181,172,1,0,0,0,181,
		173,1,0,0,0,182,17,1,0,0,0,183,184,5,8,0,0,184,189,3,20,10,0,185,186,5,
		3,0,0,186,188,3,20,10,0,187,185,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,
		0,189,190,1,0,0,0,190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,9,0,0,193,
		19,1,0,0,0,194,196,5,12,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,
		0,0,0,197,198,3,12,6,0,198,21,1,0,0,0,199,200,3,24,12,0,200,201,5,23,0,
		0,201,202,5,1,0,0,202,203,3,28,14,0,203,23,1,0,0,0,204,205,5,6,0,0,205,
		210,3,26,13,0,206,207,5,3,0,0,207,209,3,26,13,0,208,206,1,0,0,0,209,212,
		1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,
		0,213,214,5,7,0,0,214,25,1,0,0,0,215,216,5,1,0,0,216,217,5,62,0,0,217,
		27,1,0,0,0,218,221,3,30,15,0,219,221,3,12,6,0,220,218,1,0,0,0,220,219,
		1,0,0,0,221,29,1,0,0,0,222,226,5,10,0,0,223,225,3,2,1,0,224,223,1,0,0,
		0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,
		226,1,0,0,0,229,230,5,11,0,0,230,31,1,0,0,0,231,235,5,2,0,0,232,235,5,
		0,0,1,233,235,1,0,0,0,234,231,1,0,0,0,234,232,1,0,0,0,234,233,1,0,0,0,
		235,33,1,0,0,0,22,37,49,52,58,67,86,90,94,98,102,122,160,162,170,178,181,
		189,195,210,220,226,234
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
