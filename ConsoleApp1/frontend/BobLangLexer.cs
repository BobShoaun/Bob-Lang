//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from BobLang.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class BobLangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, NEWLINE=7, BOOL=8, ID=9, 
		INT=10, CHAR=11, WS=12, COMMENT=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "NEWLINE", "BOOL", "ID", 
		"INT", "CHAR", "WS", "COMMENT"
	};


	public BobLangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public BobLangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'*'", "'/'", "'+'", "'-'", "'('", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "NEWLINE", "BOOL", "ID", "INT", 
		"CHAR", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "BobLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static BobLangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,99,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,4,6,41,8,6,11,6,12,6,42,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,54,8,7,1,8,1,8,5,8,58,8,8,10,8,12,8,61,9,
		8,1,9,1,9,1,9,5,9,66,8,9,10,9,12,9,69,9,9,3,9,71,8,9,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,3,10,80,8,10,1,11,4,11,83,8,11,11,11,12,11,84,1,11,1,
		11,1,12,1,12,1,12,1,12,5,12,93,8,12,10,12,12,12,96,9,12,1,12,1,12,0,0,
		13,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,1,0,
		7,2,0,10,10,13,13,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,
		48,1,0,49,57,1,0,48,57,3,0,9,10,13,13,32,32,106,0,1,1,0,0,0,0,3,1,0,0,
		0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
		0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
		1,27,1,0,0,0,3,29,1,0,0,0,5,31,1,0,0,0,7,33,1,0,0,0,9,35,1,0,0,0,11,37,
		1,0,0,0,13,40,1,0,0,0,15,53,1,0,0,0,17,55,1,0,0,0,19,70,1,0,0,0,21,79,
		1,0,0,0,23,82,1,0,0,0,25,88,1,0,0,0,27,28,5,42,0,0,28,2,1,0,0,0,29,30,
		5,47,0,0,30,4,1,0,0,0,31,32,5,43,0,0,32,6,1,0,0,0,33,34,5,45,0,0,34,8,
		1,0,0,0,35,36,5,40,0,0,36,10,1,0,0,0,37,38,5,41,0,0,38,12,1,0,0,0,39,41,
		7,0,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,14,
		1,0,0,0,44,45,5,116,0,0,45,46,5,114,0,0,46,47,5,117,0,0,47,54,5,101,0,
		0,48,49,5,102,0,0,49,50,5,97,0,0,50,51,5,108,0,0,51,52,5,115,0,0,52,54,
		5,101,0,0,53,44,1,0,0,0,53,48,1,0,0,0,54,16,1,0,0,0,55,59,7,1,0,0,56,58,
		7,2,0,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,18,
		1,0,0,0,61,59,1,0,0,0,62,71,7,3,0,0,63,67,7,4,0,0,64,66,7,5,0,0,65,64,
		1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,71,1,0,0,0,69,67,
		1,0,0,0,70,62,1,0,0,0,70,63,1,0,0,0,71,20,1,0,0,0,72,73,5,39,0,0,73,74,
		9,0,0,0,74,80,5,39,0,0,75,76,5,39,0,0,76,77,5,92,0,0,77,78,9,0,0,0,78,
		80,5,39,0,0,79,72,1,0,0,0,79,75,1,0,0,0,80,22,1,0,0,0,81,83,7,6,0,0,82,
		81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,86,1,0,0,0,86,
		87,6,11,0,0,87,24,1,0,0,0,88,89,5,47,0,0,89,90,5,47,0,0,90,94,1,0,0,0,
		91,93,8,0,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,
		95,97,1,0,0,0,96,94,1,0,0,0,97,98,6,12,0,0,98,26,1,0,0,0,9,0,42,53,59,
		67,70,79,84,94,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
